Будущее программирования

<p>Никто не знает и не понимает, что такое «программирование» и что такое «компьютер». Какими они задумывались, какими они могли бы быть и какими они могут стать.</p>

<p>Недавно я разговаривал с физтехом и он мне с железобетонной уверенностью выпалил определение: «Программирование — это написание четких инструкций для компьютера». Я же, пересмотрев десятки лекций Кнута, опубликовав десятки переводов Ликлайдера, Ванневара Буша и Дугласа Энгельбарта, немного призадумался о природе его догматичности и отсутствию «сомнений» в своей правоте.</p>

<p>Предлагаю обсудить будущее программирования и рассмотреть взгляды нескольких философов и парочки практиков, которые работают над созданием будущего программирования прямо сейчас.
(Дополняйте своими находками «ростков будущего» и ключевыми статями и лекциями.)</p>

<h4>Основные мысли:</h4>
<ul>
<li>Во что эволюционируют ЯП за 100 лет может быть интересно потому, что хотелось бы знать, на какую ветвь «древа эволюции» сделать ставку сегодня.</li>
<li>А будут ли через 100 лет вообще писать код?</li>
<li>Любой язык программирования можно поделить на две части: некий набор фундаментальных операторов, которые играют роль аксиом, и остаток языка, который, в принципе, может быть описан в терминах этих фундаментальных операторов. Я считаю, что фундаментальные операторы — это самый важный фактор, влияющий на выживание языка в долгосрочной перспективе. Всё остальное может меняться.</li>
<li>Языки программирования — это не технологии, а больше похожи на математическую нотацию. А нотации развиваются намного медленнее чем технологии.</li>
<li>Если закона Мура сохранится, через 100 лет компьютеры станут в 74 квинтиллиона раз быстрее.</li>
<li>Причина существования большинства типов данных — это производительность. С увеличением производительности в миллион раз может случиться фундаментальный сдвиг парадигмы.</li>
<li>Можно ли избавиться от массивов?</li>
<li>Можно ли избавиться от чисел как фундаментального типа данных?</li>
<li>Через сто лет программисты захотят такой язык, на котором можно оперативно и с минимальными усилиями набросать первую, невероятно неэффективно работающую версию программы. По крайней мере, так это можно описать в современных терминах. Они скажут, что им нужен язык, на котором легко программировать.</li>
<li>Параллелизм не будет распространен в программах через сто лет.</li>
<li>Сейчас вполне возможно изобрести язык, который будет привлекателен для пользователей через сто лет.</li>
<li>Если бы мы получили язык программирования будущего, стали бы мы использовать его?</li>