Что такое JavaScript. Краткое описание и возможности

<p>Выбирая курс по JavaScript, очень многие учащиеся интересуются подробностями данной технологии. В данной статье мы вкратце рассказываем об этом.</p>

<p><b>Что такое JavaScript</b> – это интерпретируемый язык программирования (операторы языка, синтаксические элементы программы транслируются друг за другом и сразу выполняются – интерпретируются), если говорить проще, программа написанная на JavaScript читается так как она и написана, поступательно последовательно. Данный язык может создавать конструкции, позволяющие реализовывать динамические изменения, именно поэтому JavaScript используются при создании веб-сайтов в разработке интерактивных, динамических страниц. Весь анимированный контент, который нам приходится видеть на большинстве сайтов, различные слайдеры, карусели, всплывающие окна, параллакс эффекты и множество других интересных функций – все они реализованы на JavaScript, и это не самая большая часть возможностей данной технологии. Да, изначально язык JavaScript как раз и разрабатывался для добавления динамики, интерактивности, анимированных эффектов на web-страницах, работая в этом случае в плотной связке с HTML и CSS, и являясь при этом одним из трех базовых языков во frontend разработке. Но, JavaScript, так-же может создавать десктопные и мобильные приложения для различных операционных систем. И что самое интересное и важное, JavaScript может создавать серверную часть web-приложения, таким образом реализуя себя как полноценный серверный язык программирования.</p>

<p>В настоящее время JavaScript интенсивно развивается и совершенствуется, становясь глобальной технологической платформой для создания большинства интернет-проектов и приложений для различных систем, устройств и технологий. Можно сказать, что JavaScript – это язык будущего и поэтому следует сосредоточить свое внимание на изучении данного направления. Ниже приведены особенности данного языка. Если вы уже изучали программирование и решили пойти на курсы JavaScript в Москве, то вам будет полезно и интересно об этом узнать.</p>

<p>Существует несколько общих синтаксических правил, которые следует помнить, изучая язык JavaScript. Важно знать, что он чувствителен к регистру. Переменные с именем «myVariable», «myvariable» и «MYVariable» будут рассматриваться как три различных объекта. Кроме того, пробельные символы, такие как отступы и пробелы, игнорируются, если они не являются частью строки текста и не заключены в кавычки.</p>

<h4>Инструкции и комментарии. </h4>
<p>В программном коде JavaScript, как и в прочих высокоуровневых языках программирования, можно выделить инструкции и комментарии. Сценарий состоит из ряда инструкций. Инструкция — это команда, которая сообщает браузеру, что делать. Ниже представлена простая инструкция, указывающая браузеру отобразить уведомление с фразой «Спасибо». alert("Спасибо."); Точка с запятой в конце инструкции сообщает JavaScript, что это конец команды, подобно тому, как точка завершает предложение. Согласно стандарту JavaScript конец строки также приведет к концу команды, но лучшим вариантом считается завершение каждой инструкции точкой с запятой. В современном JavaScript точка с запятой является элементом не обязательным. Комментарии являются вспомогательным (необязательным) компонентом программного кода. Язык JavaScript позволяет оставлять комментарии, которые будут игнорироваться при выполнении сценария, так что вы можете оставить напоминания и разъяснения в своем коде. Это особенно полезно, если в будущем его будет редактировать другой разработчик.</p>

<h4>Существует два способа использования комментариев. </h4>
<p>Для однострочных комментариев используйте два слеша (//) в начале строки. Однострочный комментарии можно размещать на одной строке с инструкцией, если он располагается после нее. Его не обязательно закрывать, так как конец строки эффективно это сделает за вас. // Это однострочный комментарий. Многострочные комментарии используют тот же синтаксис, который вам встречался в CSS. Все, что находится между символами /**/, игнорируется браузером. Их можно использовать, чтобы «комментировать» заметки и даже фрагменты сценария при поиске ошибок в коде. /* Это многострочный комментарий. Все, что находится между этими наборами символов, будет полностью игнорироваться при выполнении сценария. Такой вид комментария необходимо закрывать. */ Однострочные комментарии удобны для добавления кратких пояснений к примерам программного кода, и часто используются начинающими программистами при выполнении простых заданий, позволяющих быстро увидеть результаты работы сценариев JavaScript.</p>

<h4>Циклы в JavaScript. </h4>
<p>Бывают случаи, когда необходимо пройтись по всем элементам в массиве и с каждым совершить действие, но не хочется выписывать все элементы в список и повторяться десять раз и более. Здесь на помощь программисту приходят циклы. Циклы позволяют легко работать с огромными наборами данных. Скажем, у нас есть форма, в которой ни одно из полей не должно оставаться пустым. Если мы используем DOM для всех случаев ввода текста на странице, она предоставит массив для каждого элемента ввода текста. Конечно, можно проверять каждое значение, сохраненное в этом массиве поочередно, но тогда код будет очень длинным, а его поддержка превратится в кошмар. Если мы используем цикл для проверки каждого значения, нам не придется изменять сценарий, независимо от того, сколько полей добавлены на страницу или удалены с нее. Циклы позволяют применить действие к каждому элементу в массиве, независимо от размера этого массива.</p>

<h4>Идиоматический JavaScript. </h4>
<p>В сообществе пользователей JavaScript предпринимаются усилия по созданию пособия по стилям для написания кода JavaScript. В документе «Принципы написания согласованного, идиоматического JavaScript» говорится следующее: "Весь код программы должен выглядеть так, будто он набран одним человеком, независимо от того, сколько людей участвовали в ее «разработке». Для достижения этой цели группа разработчиков составила Манифест идиоматического стиля, в котором описывается, как следует прописывать пробельные символы, переводы строк, кавычки, функции, переменные и прочее для создания «прекрасного кода».</p>